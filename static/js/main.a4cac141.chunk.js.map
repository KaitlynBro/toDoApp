{"version":3,"sources":["Components/Calendar.js","Components/Grateful.js","Components/Priorities.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","day","state","today","Date","react_default","a","createElement","onClick","React","Component","Grateful","props","value","handleChange","bind","assertThisInitialized","handleSubmit","event","target","preventDefault","onSubmit","type","onChange","Priorities","App","className","Components_Calendar","Components_Grateful","Components_Priorities","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwBeA,cArBX,SAAAA,IAAc,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMJI,YAAc,WACZP,EAAKQ,SAAS,CAACC,IAAKT,EAAKU,MAAMC,MAAQ,MANrC,IAAIA,EAAQ,IAAIC,KAFJ,OAGZZ,EAAKU,MAAQ,CACTC,MAAOA,GAJCX,wEAWd,OACIa,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BAEEF,EAAAC,EAAAC,cAAA,UAAQC,QAAUb,KAAKI,aAAeJ,KAAKO,MAAMD,cAhBtCQ,IAAMC,kBC4BdC,cA3BX,SAAAA,EAAYC,GAAO,IAAApB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgB,IACfnB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkB,GAAAb,KAAAH,KAAMiB,KACDV,MAAQ,CAACW,MAAO,IAErBrB,EAAKsB,aAAetB,EAAKsB,aAAaC,KAAlBtB,OAAAuB,EAAA,EAAAvB,CAAAD,IACpBA,EAAKyB,aAAezB,EAAKyB,aAAaF,KAAlBtB,OAAAuB,EAAA,EAAAvB,CAAAD,IALLA,4EAON0B,GACbvB,KAAKK,SAAS,CAACa,MAAOK,EAAMC,OAAON,6CAEtBK,GACbA,EAAME,kDAGF,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMc,SAAU1B,KAAKsB,cACjBZ,EAAAC,EAAAC,cAAA,sCAEIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,OAAOT,MAAOlB,KAAKO,MAAMW,MAAOU,SAAU5B,KAAKmB,yBApB5DL,IAAMC,WCsBdc,mLApBP,OACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACZjB,EAAAC,EAAAC,cAAA,SAAOe,KAAK,cAEhBjB,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACZjB,EAAAC,EAAAC,cAAA,SAAOe,KAAK,cAEhBjB,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SACZjB,EAAAC,EAAAC,cAAA,SAAOe,KAAK,sBAfPb,IAAMC,iBCchBe,MAVf,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACZrB,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,QCCaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a4cac141.chunk.js","sourcesContent":["import React from 'react';\n\nclass Calendar extends React.Component {\n    constructor() {\n      super();\n      let today = new Date();\n      this.state = {\n          today: today\n      }\n  }\n  handleClick = () => {\n    this.setState({day: this.state.today + ''})\n  }\n  render() {\n    return (\n        <div>\n          <label>\n            Today's Date\n            <button onClick={ this.handleClick }>{this.state.day}</button>\n          </label>\n        </div>\n    )\n  }\n}\nexport default Calendar;","import React from 'react';\n\nclass Grateful extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {value: ''};\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(event) {\n    this.setState({value: event.target.value});\n    }\n    handleSubmit(event) {\n    event.preventDefault();\n    }\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Today I'm Grateful for\n                        <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                    </label>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Grateful","import React from 'react';\n\nclass Priorities extends React.Component {\n    render() {\n        return (\n            <div>\n                <p>Priorities</p>\n                <form>\n                    <input type=\"text\" />\n                    <input type=\"checkbox\"></input>\n                </form>\n                <form>\n                    <input type=\"text\" />\n                    <input type=\"checkbox\"></input>\n                </form>\n                <form>\n                    <input type=\"text\" />\n                    <input type=\"checkbox\"></input>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Priorities\n","import React from 'react';\nimport Calendar from './Components/Calendar.js';\nimport Grateful from './Components/Grateful.js';\nimport Priorities from './Components/Priorities.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Calendar />\n       <Grateful />\n       <Priorities />\n    </div>\n  );\n}\n\nexport default App;\n\n// to do functionality\n\n// multiple inputs for to dos - i want it to resemble a piece of notepad paper so inputs will be there on page load\n// user can click on input and write something and delete it as needed \n// once user has completed a to do, they can check off the box beside that to do \n// if user wants to undo a checked off to do, they can click on checkbox and undo it\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}